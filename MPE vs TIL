library(Seurat) 
library(dplyr) 
library(data.table) 
library(readr) 
library(tidyr) 
library(ggplot2) 
library(tidyverse)
suppressMessages(library(scRepertoire))
library(SeuratData)
library(fgsea)

dfKOM002 <- Read10X(data.dir = "filtered_feature_bc_matrix")
dfLK208 <- Read10X(data.dir = "filtered_feature_bc_matrix")
dfIchi010 <- Read10X(data.dir = "Ichi010_filtered_feature_bc_matrix")
dfLK084 <- Read10X(data.dir = "filtered_feature_bc_matrix")
dfMchu003 <- Read10X(data.dir = "Mchu003_filtered_feature_bc_matrix")
dfLK006 <- Read10X(data.dir = "filtered_feature_bc_matrix")

# Calculate TRBV abundances on the raw counts before creating a Seurat object
KOM002_TRB.index <- grep(pattern = "^TRB", x = rownames(dfKOM002), value = F) 
LK208_TRB.index <- grep(pattern = "^TRB", x = rownames(dfLK208), value = F) 
LK084_TRB.index <- grep(pattern = "^TRB", x = rownames(dfLK084), value = F)
Ichi010_TRB.index <- grep(pattern = "^TRB", x = rownames(dfIchi010), value = F)
Mchu003_TRB.index <- grep(pattern = "^TRB", x = rownames(dfMchu003), value = F) 
LK006_TRB.index <- grep(pattern = "^TRB", x = rownames(dfLK006), value = F) 
# Select row indices and not TRBV names 
# Remove TRBV from count.data
dfKOM002 <- dfKOM002[-KOM002_TRB.index, ]
dfLK208 <- dfLK208[-LK208_TRB.index, ]
dfLK084 <- dfLK084[-LK084_TRB.index, ]
dfIchi010 <- dfIchi010[-Ichi010_TRB.index, ]
dfMchu003 <- dfMchu003[-Mchu003_TRB.index, ]
dfLK006 <- dfLK006[-LK006_TRB.index, ]
# Calculate TRAV abundances on the raw counts before creating a Seurat object
KOM002_TRA.index <- grep(pattern = "^TRA", x = rownames(dfKOM002), value = F) 
LK208_TRA.index <- grep(pattern = "^TRA", x = rownames(dfLK208), value = F) 
LK084_TRA.index <- grep(pattern = "^TRA", x = rownames(dfLK084), value = F) 
Ichi010_TRA.index <- grep(pattern = "^TRA", x = rownames(dfIchi010), value = F)
Mchu003_TRA.index <- grep(pattern = "^TRA", x = rownames(dfMchu003), value = F) 
LK006_TRA.index <- grep(pattern = "^TRA", x = rownames(dfLK006), value = F) 
# Select row indices and not TRAV names 
# Remove TRAV from count.data
dfKOM002 <- dfKOM002[-KOM002_TRA.index, ]
dfLK208 <- dfLK208[-LK208_TRA.index, ]
dfLK084 <- dfLK084[-LK084_TRA.index, ]
dfIchi010 <- dfIchi010[-Ichi010_TRA.index, ]
dfMchu003 <- dfMchu003[-Mchu003_TRA.index, ]
dfLK006 <- dfLK006[-LK006_TRA.index, ]

# Create Seurat object
ddIchi010 <- CreateSeuratObject(counts = dfIchi010,
                                project = "Ichi010",
                                min.cells = 3, 
                                min.features = 200, 
                                row.names = 1)
ddKOM002 <- CreateSeuratObject(counts = dfKOM002,
                               project = "KOM002",
                               min.cells = 3, 
                               min.features = 200, 
                               row.names = 1)
ddLK208 <- CreateSeuratObject(counts = dfLK208,
                              project = "LK208",
                              min.cells = 3, 
                              min.features = 200, 
                              row.names = 1)
ddLK084 <- CreateSeuratObject(counts = dfLK084, 
                              project = "LK084",
                              min.cells = 3, 
                              min.features = 200, 
                              row.names = 1) 
ddMchu003 <- CreateSeuratObject(counts = dfMchu003, 
                                project = "Mchu003",
                                min.cells = 3, 
                                min.features = 200, 
                                row.names = 1) 
ddLK006 <- CreateSeuratObject(counts = dfLK006,
                              project = "LK006",
                              min.cells = 3, 
                              min.features = 200, 
                              row.names = 1)

ddIchi010
colnames(x=ddIchi010[[]]) 
head(x=ddIchi010[[]]) 
ddIchi010[["RNA"]]@counts[1:5,1:5] 
head(x=rownames(x=ddIchi010)) 
names(x=ddIchi010) 
ddIchi010[["RNA"]] 
ddIchi010[["percent.mt"]] <- PercentageFeatureSet(ddIchi010, pattern = "^MT-") 
VlnPlot(ddIchi010, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3) 
plot1 <- FeatureScatter(ddIchi010, feature1 = "nCount_RNA", feature2 = "percent.mt") 
plot2 <- FeatureScatter(ddIchi010, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") 
plot1 + plot2 

ddKOM002
colnames(x=ddKOM002[[]]) 
head(x=ddKOM002[[]]) 
ddKOM002[["RNA"]]@counts[1:5,1:5] 
head(x=rownames(x=ddKOM002)) 
names(x=ddKOM002) 
ddKOM002[["RNA"]] 
ddKOM002[["percent.mt"]] <- PercentageFeatureSet(ddKOM002, pattern = "^MT-") 
VlnPlot(ddKOM002, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3) 
plot1 <- FeatureScatter(ddKOM002, feature1 = "nCount_RNA", feature2 = "percent.mt") 
plot2 <- FeatureScatter(ddKOM002, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") 
plot1 + plot2  

ddLK208
colnames(x=ddLK208[[]]) 
head(x=ddLK208[[]]) 
ddLK208[["RNA"]]@counts[1:5,1:5] 
head(x=rownames(x=ddLK208)) 
names(x=ddLK208) 
ddLK208[["RNA"]] 
ddLK208[["percent.mt"]] <- PercentageFeatureSet(ddLK208, pattern = "^MT-") 
VlnPlot(ddLK208, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3) 
plot1 <- FeatureScatter(ddLK208, feature1 = "nCount_RNA", feature2 = "percent.mt") 
plot2 <- FeatureScatter(ddLK208, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") 
plot1 + plot2  

ddLK084
colnames(x=ddLK084[[]]) 
head(x=ddLK084[[]]) 
ddLK084[["RNA"]]@counts[1:5,1:5] 
head(x=rownames(x=ddLK084)) 
names(x=ddLK084) 
ddLK084[["RNA"]] 
ddLK084[["percent.mt"]] <- PercentageFeatureSet(ddLK084, pattern = "^MT-") 
VlnPlot(ddLK084, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3) 
plot1 <- FeatureScatter(ddLK084, feature1 = "nCount_RNA", feature2 = "percent.mt") 
plot2 <- FeatureScatter(ddLK084, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") 
plot1 + plot2 

ddMchu003
colnames(x=ddMchu003[[]]) 
head(x=ddMchu003[[]]) 
ddMchu003[["RNA"]]@counts[1:5,1:5] 
head(x=rownames(x=ddMchu003)) 
names(x=ddMchu003) 
ddMchu003[["RNA"]] 
ddMchu003[["percent.mt"]] <- PercentageFeatureSet(ddMchu003, pattern = "^MT-") 
VlnPlot(ddMchu003, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3) 
plot1 <- FeatureScatter(ddMchu003, feature1 = "nCount_RNA", feature2 = "percent.mt") 
plot2 <- FeatureScatter(ddMchu003, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") 
plot1 + plot2 

ddLK006
colnames(x=ddLK006[[]]) 
head(x=ddLK006[[]]) 
ddLK006[["RNA"]]@counts[1:5,1:5] 
head(x=rownames(x=ddLK006)) 
names(x=ddLK006) 
ddLK006[["RNA"]] 
ddLK006[["percent.mt"]] <- PercentageFeatureSet(ddLK006, pattern = "^MT-") 
VlnPlot(ddLK006, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3) 
plot1 <- FeatureScatter(ddLK006, feature1 = "nCount_RNA", feature2 = "percent.mt") 
plot2 <- FeatureScatter(ddLK006, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") 
plot1 + plot2 

ddKOM002 <- subset(ddKOM002, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 10) 
ddLK208 <- subset(ddLK208, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 10)
ddLK084 <- subset(ddLK084, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 10) 
ddIchi010 <- subset(ddIchi010, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 10) 
ddMchu003 <- subset(ddMchu003, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 10) 
ddLK006 <- subset(ddLK006, subset = nFeature_RNA > 200 & nFeature_RNA < 5000 & percent.mt < 10)

# Merge cases and remove batch effects
ddbulk <- merge(ddKOM002,y=c(ddLK208,ddLK084,ddIchi010,ddMchu003,ddLK006),add.cell.ids=c("KOM002_T","LK208_T","LK084_T","Ichi010_T","Mchu003_T","LK006_T"))
head(colnames(ddbulk))
tail(colnames(ddbulk))
unique(sapply(X = strsplit(colnames(ddbulk), split = "_"), FUN = "[", 1))
table(ddbulk$orig.ident)
ddbulk

ddbulk.list <- SplitObject(ddbulk,split.by="orig.ident")
ddbulk.list <- lapply(X = ddbulk.list, FUN = function(x) {
  x <- NormalizeData(x,normalization.method = "LogNormalize", scale.factor = 10000)
  x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
ddbulk.features <- SelectIntegrationFeatures(object.list = ddbulk.list)
bulk.anchors <- FindIntegrationAnchors(object.list = ddbulk.list, anchor.features = ddbulk.features,k.anchor = 20)

# this command creates an 'integrated' data assay
bulk.combined <- IntegrateData(anchorset = bulk.anchors)
# specify that we will perform downstream analysis on the corrected data note that the
# original unmodified data still resides in the 'RNA' assay
DefaultAssay(bulk.combined) <- "integrated"

# Run the standard workflow for visualization and clustering
bulk.combined <- ScaleData(bulk.combined, verbose = FALSE)
bulk.combined <- RunPCA(bulk.combined, npcs = 30, verbose = FALSE)
bulk.combined <- RunUMAP(bulk.combined, reduction = "pca", dims = 1:30)
bulk.combined <- FindNeighbors(bulk.combined, reduction = "pca", dims = 1:30)
bulk.combined <- FindClusters(bulk.combined, resolution = 0.6)

DimPlot(bulk.combined, reduction = "umap" , label = TRUE, label.size = 6) 
DimPlot(bulk.combined, reduction = "umap",split.by = "orig.ident", label = TRUE, repel = TRUE,ncol = 3) +NoLegend()

# Cluster labeling
new.cluster.ids <- c("C4-GZMK","C5-HLA-DRA","C1-LEF1","C3-IL7R","C2-RPL13","C6-PDCD1","C8-KLRC2","C10-S100A9","C7-IFNG","C1-LEF1","C11-HSPA1B","C12-IFIT2","C9-MKI67","C13-JUNB")
names(new.cluster.ids) <- levels(bulk.combined)
bulk.combined_label <- RenameIdents(bulk.combined , new.cluster.ids)

# <Save the object at this point so that it can easily be loaded back>
saveRDS(bulk.combined, file = "G:/SingleCell/singlecellfile/TILvsMPE_bulk.combined.rds")
saveRDS(bulk.combined_label, file = "G:/SingleCell/singlecellfile/TILvsMPE_bulk.combined_label.rds")


